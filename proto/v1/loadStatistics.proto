syntax = "proto3";

package beget.statistics.v1.loadStatistics;
import "google/api/annotations.proto";
import "statistics/proto/v1/structures.proto";

// Сервис получения статистики
service LoadStatisticsService {
  // Получить статистику по серверу
  rpc getServerInfo (GetServerInfoRequest) returns (GetServerInfoResponse) {
    option (google.api.http) = {
      get: "/v1/statistics/server-info"
    };
  }

  // Получить общую агрегированную статистику нагрузки на сайты
  rpc findGeneralAggregatedStats(FindGeneralAggregatedStatsRequest) returns (FindGeneralAggregatedStatsResponse) {
    option (google.api.http) = {
      get: "/v1/statistics/site/general"
    };
  }

  // Получить общую агрегированную статистику нагрузки на mysql базы
  rpc findGeneralMysqlAggregatedStats(FindGeneralMysqlAggregatedStatsRequest) returns (FindGeneralMysqlAggregatedStatsResponse) {
    option (google.api.http) = {
      get: "/v1/statistics/mysql/general"
    };
  }

  // Получить общую почасовую статистику нагрузки за определенный день
  rpc findStatsByDay(FindStatsByDayRequest) returns (FindStatsByDayResponse) {
    option (google.api.http) = {
      get: "/v1/statistics/by-day"
    };
  }

  // Получить подробную статистику нагрузки по конкретному сайту
  rpc findDetailedCpStats(FindDetailedSiteStatsRequest) returns (FindDetailedSiteStatsResponse) {
    option (google.api.http) = {
      get: "/v1/statistics/site-load/details"
    };
  }

  // Получить подробную статистику нагрузки по конкретной базе
  rpc findDetailedMysqlCpStats(GetDetailedMysqlStatsRequest) returns (GetDetailedMysqlStatsResponse) {
    option (google.api.http) = {
      get: "/v1/statistics/mysql-load/details"
    };
  }

  // Получить общую статистику нагрузки
  rpc getSiteLoadStats(GetSiteStatsRequest) returns (GetSiteStatsResponse) {
    option (google.api.http) = {
      get: "/v1/statistics/siteLoad"
    };
  }

  // Получить статистику по средней нагрузке на сайты
  rpc getSiteAverageLoadStats(GetSiteAverageLoadStatsRequest) returns (GetSiteAverageLoadStatsResponse) {
    option (google.api.http) = {
      get: "/v1/statistics/siteAverageLoad"
    };
  }

  // Получить статистику изменения дискового пространства
  rpc getDiskQuotaStats(GetDiskQuotaStatsRequest) returns (GetDiskQuotaStatsResponse) {
    option (google.api.http) = {
      get: "/v1/statistics/diskQuota"
    };
  }

  // Получить общую статистику изменения размера mysql базы данных
  rpc getMysqlSizeStats(GetMysqlSizeStatsRequest) returns (GetMysqlSizeStatsResponse) {
    option (google.api.http) = {
      get: "/v1/statistics/mysqlSize"
    };
  }

  // Получить общую статистику нагрузки на mysql базу данных
  rpc getMysqlLoadStats(GetMysqlLoadStatsRequest) returns (GetMysqlLoadStatsResponse) {
    option (google.api.http) = {
      get: "/v1/statistics/mysqlLoad"
    };
  }

}

message GetServerInfoRequest {
}

message GetServerInfoResponse {
  // Средняя загрузка на сервере
  LoadAverage load_average = 1;
  // Аптайм сервера
  Uptime uptime = 2;
  // Информация о сервере
  Server server = 3;
  message Server {
    // Версия апача
    string server_apache_version = 1;
    // Версия процессора
    string server_cpu_name = 2;
    // Количество оперативной памяти
    int64 server_memory = 3;
    // Версия mysql
    string server_mysql_version = 4;
    // Имя сервера
    string server_name = 5;
    // Версия nginx
    string server_nginx_version = 6;
    // Версия perl
    string server_perl_version = 7;
    // Версия php
    string server_php_version = 8;
    // Версия python
    string server_python_version = 9;
  }

  message Uptime {
    // Количество секунд аптайма
    int64 total = 1;
    // Количество секунд в idle статусе
    int64 idle = 2;
  }

  message LoadAverage {
    // Среднее значение нагрузки для 1 минуты
    float la1 = 1;
    // Среднее значение нагрузки для 5 минут
    float la5 = 2;
    // Среднее значение нагрузки для 15 минут
    float la10 = 3;
    // Pid последнего созданного процесса на сервере
    float last_proc = 4;
    // Количество запущенных процессов
    int64 running_proc = 5;
    // Общее количество процессов
    int64 total_proc = 6;
  }
}

message FindGeneralAggregatedStatsRequest {
  // Тип статистики
  repeated StatisticsType type = 1;

  enum StatisticsType {
    // Нагрузка на mysql бд
    MYSQL = 0;
    // Нагрузка на сайты
    SITE = 1;
  }
}

message FindGeneralAggregatedStatsResponse {
  // Общая агрегированная статистика нагрузки на сайты
  repeated GeneralSiteStats general_site_stats = 1;
  // Общая агрегированная статистика нагрузки на mysql
  repeated GeneralMysqlStats general_mysql_stats = 2;

  message GeneralMysqlStats {
    // Средняя нагрузка за месяц
    float cp = 1;
    // Название базы
    string name = 2;
  }

  message GeneralSiteStats {
    // Средняя нагрузка за месяц
    float cp = 1;
    // Название сайта
    string name = 2;
    // Id сайта
    uint64 id = 3;
  }
}

message FindGeneralMysqlAggregatedStatsRequest {}

message FindGeneralMysqlAggregatedStatsResponse {
    // Средняя нагрузка за месяц
    float cp = 1;
    // Название базы
    string name = 2;
}

message GetSiteStatsRequest {

}

message GetSiteStatsResponse {
  // Данные по дням за последний месяц
  repeated structures.StatisticsSet data = 1;
}

message GetSiteAverageLoadStatsRequest {

}

message GetSiteAverageLoadStatsResponse {
  // Данные по часам за последние сутки
  repeated structures.StatisticsSet data = 1;
}

message GetDiskQuotaStatsRequest {

}

message GetDiskQuotaStatsResponse {
  // Данные по часам за последний месяц
  repeated structures.StatisticsSet data = 1;
}

message GetMysqlSizeStatsRequest {

}

message GetMysqlSizeStatsResponse {
  // Данные по часам за последний месяц
  repeated structures.StatisticsSet data = 1;
}

message GetMysqlLoadStatsRequest {

}

message GetMysqlLoadStatsResponse {
  // Данные по дням за последний месяц
  repeated structures.StatisticsSet data = 1;
}

message FindStatsByDayRequest {
  repeated SearchScope scope = 1;

  message SearchScope {
    // Тип статистики
    StatisticType type = 1;
    // За какой день собрать статистику. Дата в формате Y-m-d
    // либо количество секунд, прошедших с начала эпохи Unix (1 января 1970 00:00:00 GMT) до текущего времени.
    string date = 2;

    enum StatisticType {
      // Нагрузка на mysql бд
      MYSQL = 0;
      // Нагрузка на сайты
      SITE = 1;
    }
  }
}

message FindStatsByDayResponse {
  // Общая статистика нагрузки на mysql за определенный день
  MysqlStat mysql_stat = 1;
  // Общая статистика нагрузки на сайты за определенный день
  SiteStat site_stat = 2;

  message MysqlStat {
    // Данные по часам за определенный день
    repeated structures.StatisticsSet data = 1;
  }

  message SiteStat {
    // Данные по часам за определенный день
    repeated structures.StatisticsSet data = 1;
  }
}

message FindDetailedSiteStatsRequest {
  // Id сайта
  uint64 id = 1;
}

message FindDetailedSiteStatsResponse {
  // Статистика нагрузки на сайт за последний месяц по дням
  repeated structures.StatisticsSet stats_by_days = 1;
  // Статистика нагрузки на бд за последний месяц по часам
  repeated structures.StatisticsSet stats_by_hours = 2;
}

message GetDetailedMysqlStatsRequest {
  // Имя бд
  string name = 1;
}

message GetDetailedMysqlStatsResponse {
  // Статистика нагрузки на бд за последний месяц по дням
  repeated structures.StatisticsSet stats_by_days = 1;
  // Статистика нагрузки на бд за последний месяц по часам
  repeated structures.StatisticsSet stats_by_hours = 2;
}